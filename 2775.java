/*

백준 2775 - 부녀회장이 될테야

평소 반상회에 참석하는 것을 좋아하는 주희는 이번 기회에 부녀회장이 되고 싶어 각 층의 사람들을 불러 모아 반상회를 주최하려고 한다.

이 아파트에 거주를 하려면 조건이 있는데, “a층의 b호에 살려면 자신의 아래(a-1)층의 1호부터 b호까지 사람들의 수의 합만큼 사람들을 데려와 살아야 한다” 는 계약 조항을 꼭 지키고 들어와야 한다.

아파트에 비어있는 집은 없고 모든 거주민들이 이 계약 조건을 지키고 왔다고 가정했을 때, 주어지는 양의 정수 k와 n에 대해 k층에 n호에는 몇 명이 살고 있는지 출력하라. 
단, 아파트에는 0층부터 있고 각층에는 1호부터 있으며, 0층의 i호에는 i명이 산다.

첫 번째 줄에 Test case의 수 T가 주어진다. 그리고 각각의 케이스마다 입력으로 첫 번째 줄에 정수 k, 두 번째 줄에 정수 n이 주어진다


※ 문제 접근 방식

1) 아파트는 0층부터 존재하며, 각 층은 1호부터 시작한다는 점을 주의

2) a층 b호에 살기 위해선 a-1층의 1호부터 b호까지 사람 수의 합을 데려와 살아야 함
   ex) K층 N호 = (K-1)층 1호 + (K-1)층 2호 + ... + (K-1)층 N호
   
3) 2차원 배열을 선언한 후, 0층은 1,2,3,4,5 ..... 이런식으로 초기화, 1호는 모두 1로 초기화 (층 / 호)

4) 2중 for문을 돌며 계산하면 됨.

*/

import java.util.*;

public class Main {
    public static void main(String[] args) {
        
        Scanner sc = new Scanner(System.in);
        
        int[][] apt = new int[15][15];    // 아파트 층/호를 넣는 배열
        
        for(int i=0; i<15; i++) {
            apt[i][1] = 1;    // i층 1호
            apt[0][i] = i;    // 0층 i호
        }
        
        for(int i=1; i<15; i++) {
            for(int j=2; j<15; j++) {     // 1층의 2호부터 14층의 14호까지 반복하여 계산하여야 함 (1층 1호는 1이기 때문)
                apt[i][j] = apt[i][j-1] + apt[i-1][j];      // i 층의 직전 호(j-1) 와 j 호의 아래층(i-1) 의 합을 채우면 됨
            }
        }
        
        int Test = sc.nextInt();            // N x N 배열을 선언하기 위한 TestCase 값을 입력받음
        
        for(int i=0; i<Test; i++) {
            int floor = sc.nextInt();       // 입주할 층수 입력 받음         
            int ho = sc.nextInt();          // 입주할 호수 입력 받음
            
            System.out.println(apt[floor][ho]);
        }
        
    }
}
